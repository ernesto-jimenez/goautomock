// Code generated by go-bindata.
// sources:
// templates/simple.go.tpl
// templates/testify.go.tpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesSimpleGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\x4d\x6b\xdb\x40\x10\x3d\x6b\x7f\xc5\x20\x4c\x91\x1a\xa3\xdc\x03\x39\x05\x0a\x85\x26\x04\x93\xd2\x43\xc8\x61\x91\x46\xce\x62\xed\x4a\x48\x23\x6a\x77\x3a\xff\xbd\xec\x47\xad\x38\x75\x5b\x4a\xdb\xdb\xea\xed\x68\xde\xdb\xf7\x66\x06\x5d\xef\xf4\x16\x81\xb9\xba\x8f\x47\x11\xa5\x8c\x1d\xfa\x91\xa0\x50\x59\xde\x5a\xca\x15\x40\x3e\x1d\x5c\x9d\x2b\xe6\x51\xbb\x2d\xc2\x6a\xd0\xf4\xbc\x86\x95\xd3\x16\xe1\xea\x1a\xaa\xf7\xe1\x8f\x49\x44\x65\xcc\x01\x16\x81\x9c\x39\x14\x8a\xe4\xcc\xe8\x1a\x11\x55\x2a\x75\x79\xe9\xd9\xee\x62\x89\xed\xeb\x9d\xa2\xc3\x80\x2f\xb0\x89\xc6\xb9\x26\x60\x05\x60\x67\x02\xcf\x5c\x6d\x3e\xdd\xce\x84\x7b\x95\xd5\xba\xeb\x26\xb0\x7a\x78\x9c\x68\x34\x6e\xfb\x64\x1c\x79\xce\xa8\xab\xba\x45\x7a\xee\x9b\xa4\x23\x35\x7c\x37\xbb\x1a\xda\xd9\xd5\xc5\x51\xbe\x71\x0d\xee\xd7\xb0\x0a\xcc\x5e\xff\xbd\x1e\xb5\x7d\x38\x0c\x38\x89\x30\x9b\x36\x95\x88\xac\x21\x49\x67\x0e\xd5\xfe\x10\xbe\x4b\xf8\x45\xbb\x0d\xd2\x3c\xba\x3f\xeb\xe7\x15\x47\x93\x44\x29\x2f\x17\xee\xf0\x73\x7a\x04\x7c\x85\x1b\x3d\x18\xd2\x9d\xf9\x82\x22\x45\x09\x6f\x17\xbf\x58\x65\x63\xe0\x83\x37\x47\x90\x55\x16\xad\xba\x02\xab\x77\x58\x9c\x1a\x56\xae\x55\x16\x68\x98\x57\x5b\x74\x41\xb2\x88\x3a\xe3\xe2\x0f\x61\x61\x03\x36\xdc\x46\x89\x85\xf5\x4a\x7c\x93\x54\x54\x2e\xf5\x7f\x65\xf7\xc0\xfc\x1d\x83\xff\x6e\x7d\x9c\xb5\xca\xce\x54\x7d\xe8\xeb\x5d\x51\x2a\x80\x06\x5b\x1c\x13\xf8\xd1\x75\x11\xce\x4c\x0b\xb6\x3a\x9d\xac\xeb\x6b\x70\xa6\xf3\x29\x64\x83\x76\xa6\x2e\xf2\xd9\xe1\x7e\xc0\x9a\xb0\x01\x9f\x01\x50\x7f\x6a\xdd\x62\x51\x5e\xfa\x20\x32\x5b\x85\xac\x1e\xf3\xe5\xe2\xe9\xe2\xc2\x0f\x84\x69\x5f\xbd\x28\x25\x9d\x94\xbf\x16\xf3\xaf\x2c\x3f\xce\xa4\x9c\xee\xeb\x43\x4f\xba\xbb\x09\x2b\x18\x85\x4c\x40\xcf\x08\xda\xf6\xb3\x23\xe8\x5b\x88\xeb\x49\x7d\x80\x7f\xf2\xe8\xdf\x4f\xce\x42\x53\x94\x60\x1c\xbd\xc8\x67\x73\x36\xa0\xcd\x92\x50\x32\xe8\x9c\xa5\xca\x8f\x78\x5c\xb1\x6f\x01\x00\x00\xff\xff\x8e\x11\x90\x83\xf8\x04\x00\x00")

func templatesSimpleGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSimpleGoTpl,
		"templates/simple.go.tpl",
	)
}

func templatesSimpleGoTpl() (*asset, error) {
	bytes, err := templatesSimpleGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/simple.go.tpl", size: 1272, mode: os.FileMode(420), modTime: time.Unix(1516915718, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTestifyGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\xcf\x6e\xdb\x30\x0c\xc6\xcf\xe2\x53\x10\x46\x36\xd8\x43\xe0\xdc\x03\xec\xd4\xc3\xb0\x43\x8b\x62\xdb\x0b\x68\x36\x9d\x08\xb5\x15\x41\xa2\xdb\x66\x1c\xdf\x7d\x90\xf2\xaf\x43\x86\x62\xc0\xd6\x9b\x40\x7e\xfc\x91\xfc\xc4\x60\xbb\x07\xbb\x21\x14\x69\xef\x0f\x4f\x55\x00\x37\x85\x5d\x64\xac\xc1\x54\xc3\xc4\x15\x98\x69\xd7\x3d\x60\xb5\x71\xbc\x9d\xbf\xb7\xdd\x6e\x5a\x25\x8e\xc4\xdd\x36\xae\x98\x12\xbb\x61\xbf\xca\x8a\x0a\x44\xa2\xf5\x1b\xc2\x45\xb0\xbc\x5d\xe2\xc2\xdb\x89\x70\xfd\x11\xdb\xcf\x85\x98\x54\xc1\x88\x94\xb0\x2a\x56\x22\x45\xa8\x5a\x89\x90\xef\x55\xa1\x01\x58\xad\xf2\x34\x77\x07\x49\xc6\x02\xef\x03\xbd\x88\x25\x8e\x73\xc7\x28\x87\xb1\xda\xdb\x2c\x51\x80\x61\xf6\x1d\xde\xd1\xd3\x51\x88\x3f\xf1\xc6\x06\xc7\x76\x74\x3f\x48\xb5\x6e\xf0\xc3\x05\x21\x60\x22\xf1\x1c\x3d\xbe\x3f\x07\x45\x33\x45\x64\xb1\x21\x5f\x66\x56\x3d\xef\xd3\xde\x12\x6f\x77\x7d\x9e\xff\x6a\x3c\xea\x71\x2a\xd9\xc3\x04\xf5\x94\x1b\x65\xc8\x51\xd4\x5c\xf4\xf5\xd9\x1f\xe7\x7b\x7a\x5e\xe2\xa2\xac\x96\x9b\xdd\xdb\x68\xa7\x6f\xfb\x40\x49\x55\xc4\x0d\x47\x89\xea\x12\x8f\xde\x04\x91\x53\x0c\x45\x4a\x65\x96\x96\x5c\x83\xaf\xa0\xbf\x94\x4d\x5f\x65\x5f\xf3\x04\x8a\xf2\xf7\xe2\xe2\x5a\x66\x4e\xed\x8d\x1d\x47\xea\xff\xd7\x42\xa7\xb6\xf9\x3a\xfe\x6a\x0d\x30\x8f\x36\x62\xfc\x93\x25\x60\xd2\x93\xe3\x6e\x8b\x91\x52\x2e\x8c\xc4\xed\x27\xe2\xfa\xa2\x6d\xda\x3a\x4b\xf3\x92\xa6\xb3\x89\xd0\xbb\x71\x7d\x7c\x9e\x31\x6b\x30\xe6\x25\x3f\x83\x12\x98\x9e\x06\x3b\x8f\x9c\xb3\xc1\x7a\xd7\xd5\xc3\xc4\xed\xd7\x10\x9d\xe7\xa1\xae\x66\x4f\xcf\x81\x3a\xa6\x1e\x33\x65\x8d\xef\x1e\xab\x65\x2e\x6c\x1a\x30\xe5\xf6\x0f\x67\x7e\xba\xbe\x7f\xfa\xb4\x78\xe5\x1f\x88\xd0\x98\x8a\x07\x6f\xf6\x43\xa7\x56\x7a\x7e\xfd\x0a\x00\x00\xff\xff\xa7\x82\x88\x38\x44\x04\x00\x00")

func templatesTestifyGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesTestifyGoTpl,
		"templates/testify.go.tpl",
	)
}

func templatesTestifyGoTpl() (*asset, error) {
	bytes, err := templatesTestifyGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/testify.go.tpl", size: 1092, mode: os.FileMode(420), modTime: time.Unix(1489651514, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/simple.go.tpl": templatesSimpleGoTpl,
	"templates/testify.go.tpl": templatesTestifyGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"simple.go.tpl": &bintree{templatesSimpleGoTpl, map[string]*bintree{}},
		"testify.go.tpl": &bintree{templatesTestifyGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

