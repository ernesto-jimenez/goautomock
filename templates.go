// Code generated by go-bindata.
// sources:
// templates/simple.go.tpl
// templates/testify.go.tpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesSimpleGoTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x93\x41\x6b\xdb\x40\x10\x85\xcf\x9a\x5f\x31\x08\x53\xa4\xc6\x38\xf7\x80\x4f\x81\x42\x0f\x0d\xa1\xe4\x16\x72\x58\xa4\x91\xbd\x58\xbb\x5a\xa4\x11\x4d\x3a\x9d\xff\x5e\x76\x57\xb5\xe3\x34\x6d\x29\x6d\x6e\xf2\xec\xf3\xbe\xb7\xdf\xcc\x04\xd3\x1c\xcc\x8e\x50\x64\x73\x9b\x3f\x55\x01\xac\x0b\xc3\xc8\x58\x41\x51\x76\x8e\x4b\x10\x19\x8d\xdf\x11\xae\x82\xe1\xfd\x1a\x57\xde\x38\xc2\xab\x2d\x6e\x3e\x26\xe1\xa4\x0a\x85\x48\x2a\xab\x62\x29\x92\x84\xaa\xa5\x08\xf9\x56\x15\x6a\x80\xcb\xcb\x68\x72\x93\x25\x6e\x68\x0e\xc0\x4f\x81\x9e\xd5\x26\x1e\xe7\x86\x51\xa0\x68\x4c\xdf\x4f\xe8\x4c\xb8\x9f\x78\xb4\x7e\xf7\x60\x3d\x47\x83\x1c\x62\xf3\x89\x78\x3f\xb4\x8b\xe9\xf2\xef\x0f\xb3\x6f\xb0\x9b\x7d\x53\x1d\xb3\x5a\xdf\xd2\xe3\x1a\x57\xc9\x26\x86\xbd\x35\xa3\x71\x77\x4f\x81\x26\x55\x11\xdb\x2d\x12\xd5\x35\x2e\x39\x45\x92\x3a\x7e\xa4\xdf\x35\xfe\xe6\xba\xcf\xc4\xf3\xe8\xff\xee\xbe\x98\x38\x13\x51\x80\x18\x17\x6f\xe8\xcb\xf2\x08\xfc\x86\xd7\x26\x58\x36\xbd\xfd\x4a\xaa\x55\x8d\xef\x4f\x70\x04\x8a\x31\xf9\xe1\xbb\x63\x51\xa0\xc8\xa8\xae\xd0\x99\x03\x55\xe7\xc0\xea\x35\x14\xc9\x46\x64\xb5\x23\x9f\x22\xab\xc2\x2b\x14\x7f\xea\x0c\xb5\xe8\xd2\x69\x8e\x58\xb9\x98\x24\x5e\xb2\x88\xea\x93\xfe\x9f\x70\x07\x91\x1f\x35\x7c\x73\xf4\x11\xa1\xed\xd0\x6d\xce\x67\x66\xbb\x45\x6f\xfb\x78\x58\x04\xe3\x6d\x53\x95\xb3\xa7\xc7\x40\x0d\x53\x8b\x91\x2e\xf2\x70\x0e\xe5\xf4\xf8\xb2\x8e\x88\x0b\xb7\x49\x5d\xb8\x2f\x4f\x07\x0f\x17\x17\xb1\xd5\xb6\x7b\x91\x75\xe9\xe1\x92\xe9\x65\x98\xff\x05\xf3\x38\x6d\x7a\xbe\x76\xd7\x69\xaf\x72\x86\x09\x79\x4f\x68\xdc\x30\x7b\xc6\xa1\xc3\xbc\x73\x3c\xa4\xf2\x2f\xde\xfb\xe7\x71\xb8\x1b\xd8\xf4\xc9\xa6\xaa\xd1\x7a\x7e\x36\xb7\xaf\x51\x82\x38\x8f\x79\x1f\xbe\x07\x00\x00\xff\xff\x23\xde\xd1\x84\x89\x04\x00\x00")

func templatesSimpleGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSimpleGoTpl,
		"templates/simple.go.tpl",
	)
}

func templatesSimpleGoTpl() (*asset, error) {
	bytes, err := templatesSimpleGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/simple.go.tpl", size: 1161, mode: os.FileMode(420), modTime: time.Unix(1481584688, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTestifyGoTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x92\xcf\x6e\xdb\x30\x0c\xc6\xcf\xe2\x53\x10\x46\x36\xd8\x43\xe0\xdc\x03\xec\xd4\xc3\xb0\x43\x8b\x62\xdb\x0b\x68\x36\x9d\x08\xb5\x15\x41\xa2\xdb\x66\x1c\xdf\x7d\x90\xf2\xaf\x43\x86\x62\xc0\xd6\x9b\x40\x7e\xfc\x91\xfc\xc4\x60\xbb\x07\xbb\x21\x14\x69\xef\x0f\x4f\x55\x00\x37\x85\x5d\x64\xac\xc1\x54\xc3\xc4\x15\x98\x69\xd7\x3d\x60\xb5\x71\xbc\x9d\xbf\xb7\xdd\x6e\x5a\x25\x8e\xc4\xdd\x36\xae\x98\x12\xbb\x61\xbf\xca\x8a\x0a\x44\xa2\xf5\x1b\xc2\x45\xb0\xbc\x5d\xe2\xc2\xdb\x89\x70\xfd\x11\xdb\xcf\x85\x98\x54\xc1\x88\x94\xb0\x2a\x56\x22\x45\xa8\x5a\x89\x90\xef\x55\xa1\x01\x58\xad\xf2\x34\x77\x07\x49\xc6\x02\xef\x03\xbd\x88\x25\x8e\x73\xc7\x28\x87\xb1\xda\xdb\x2c\x51\x80\x61\xf6\x1d\xde\xd1\xd3\x51\x88\x3f\xf1\xc6\x06\xc7\x76\x74\x3f\x48\xb5\x6e\xf0\xc3\x05\x21\x60\x22\xf1\x1c\x3d\xbe\x3f\x07\x45\x33\x45\x64\xb1\x21\x5f\x66\x56\x3d\xef\xd3\xde\x12\x6f\x77\x7d\x9e\xff\x6a\x3c\xea\x71\x2a\xd9\xc3\x04\xf5\x94\x1b\x65\xc8\x51\xd4\x5c\xf4\xf5\xd9\x1f\xe7\x7b\x7a\x5e\xe2\xa2\xac\x96\x9b\xdd\xdb\x68\xa7\x6f\xfb\x40\x49\x55\xc4\x0d\x47\x89\xea\x12\x8f\xde\x04\x91\x53\x0c\x45\x4a\x65\x96\x96\x5c\x83\xaf\xa0\xbf\x94\x4d\x5f\x65\x5f\xf3\x04\x8a\xf2\xf7\xe2\xe2\x5a\x66\x4e\xed\x8d\x1d\x47\xea\xff\xd7\x42\xa7\xb6\xf9\x3a\xfe\x6a\x0d\x30\x8f\x36\x62\xfc\x93\x25\x60\xd2\x93\xe3\x6e\x8b\x91\x52\x2e\x8c\xc4\xed\x27\xe2\xfa\xa2\x6d\xda\x3a\x4b\xf3\x92\xa6\xb3\x89\xd0\xbb\x71\x7d\x7c\x9e\x31\x6b\x30\xe6\x25\x3f\x83\x12\x98\x9e\x06\x3b\x8f\x9c\xb3\xc1\x7a\xd7\xd5\xc3\xc4\xed\xd7\x10\x9d\xe7\xa1\xae\x66\x4f\xcf\x81\x3a\xa6\x1e\x33\x65\x8d\xef\x1e\xab\x65\x2e\x6c\x1a\x30\xe5\xf6\x0f\x67\x7e\xba\xbe\x7f\xfa\xb4\x78\xe5\x1f\x88\xd0\x98\x8a\x07\x6f\xf6\x43\xa7\x56\x7a\x7e\xfd\x0a\x00\x00\xff\xff\xa7\x82\x88\x38\x44\x04\x00\x00")

func templatesTestifyGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesTestifyGoTpl,
		"templates/testify.go.tpl",
	)
}

func templatesTestifyGoTpl() (*asset, error) {
	bytes, err := templatesTestifyGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/testify.go.tpl", size: 1092, mode: os.FileMode(420), modTime: time.Unix(1481584613, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/simple.go.tpl": templatesSimpleGoTpl,
	"templates/testify.go.tpl": templatesTestifyGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"simple.go.tpl": &bintree{templatesSimpleGoTpl, map[string]*bintree{}},
		"testify.go.tpl": &bintree{templatesTestifyGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

