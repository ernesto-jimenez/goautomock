// Code generated by go-bindata.
// sources:
// templates/simple.go.tpl
// templates/testify.go.tpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesSimpleGoTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x52\xcb\x6a\xc3\x30\x10\xbc\xef\x57\x2c\xc6\x07\xa7\x04\xe7\x5e\xc8\xb5\xd0\x43\x4b\x28\xfd\x01\x21\xaf\x13\x91\x48\x16\x8e\x0c\x09\xcb\xfe\x7b\xb1\xe4\x24\x72\x5a\x0a\xa5\xad\x4e\x7a\x8c\x66\x67\x67\xd6\x2b\xbd\x57\x5b\x42\xe6\x7a\x93\xb6\x22\x00\xc6\xfa\xae\x0f\x58\x01\x4e\xab\x68\x6d\x28\x80\xb9\x57\x6e\x4b\x58\x7a\x15\x76\x4b\x2c\x9d\xb2\x84\x8f\x6b\xac\x9f\x23\xfe\x28\x72\xfd\xc0\x1c\x5f\x45\xb0\x60\x8e\x78\x91\x82\x99\x5c\x23\x02\x0b\x80\xd5\x6a\x2c\xf9\x9a\x20\xb6\xd3\x7b\x08\x67\x4f\xd9\xdd\x31\xf4\x83\x0e\xc8\x19\x63\x2a\x5e\xbf\x50\xd8\x75\xcd\xbc\xd8\xf4\xeb\x69\x70\x1a\xdb\xc1\xe9\xea\x2a\xd5\xb8\x86\x4e\x4b\x2c\x23\xfd\xa8\x75\xa3\x7a\x65\xdf\xcf\x9e\x8e\x22\xcc\xa6\x9d\x20\x22\x4b\x9c\xf4\x31\x47\xf4\xb8\x89\xe7\x05\x7e\x43\xf7\x46\x61\xe8\xdd\xcf\xf8\x32\xe1\xc9\x10\x01\x60\x2e\xb7\xe4\x22\xa5\x08\x7c\xd1\xec\x27\xc7\xa8\x41\x1b\x5f\x61\xec\x18\x2b\x8b\x0f\x89\x64\x02\x2d\x6e\xf8\x5f\xd9\xe1\x99\x2f\x77\xf8\xef\xd6\x64\x81\x9b\x16\x6d\x3d\x8f\x76\xbd\x46\x67\x0e\x19\xe6\xb2\xbc\x72\x46\x57\xc5\xe0\xe8\xe4\x49\x07\x6a\x50\xab\xc3\x01\x43\x37\x77\xea\xe6\x48\x71\x0b\x21\x9f\x23\xd3\xde\xc9\xee\xe3\xe1\x22\xf7\x5e\xd0\x5f\xf9\x7a\x1d\x8c\x31\xf9\x34\x12\x1f\x01\x00\x00\xff\xff\xee\xdd\xb5\xf6\x99\x03\x00\x00")

func templatesSimpleGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSimpleGoTpl,
		"templates/simple.go.tpl",
	)
}

func templatesSimpleGoTpl() (*asset, error) {
	bytes, err := templatesSimpleGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/simple.go.tpl", size: 921, mode: os.FileMode(420), modTime: time.Unix(1481576636, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTestifyGoTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x92\xcd\x8a\xdb\x30\x10\x80\xcf\x9a\xa7\x18\x4c\x0a\x76\x09\xce\x3d\xd0\x53\x0f\xa5\x87\x2d\x4b\xdb\x17\x50\xe5\x71\x6c\xd6\x52\x8c\x34\xde\x6e\x18\xe6\xdd\x8b\xe4\x24\xbb\x25\x65\x29\xb4\x7b\x13\xd2\x37\xdf\xfc\x69\xb6\xee\xc1\x1e\x08\x45\xda\xfb\xf5\xa8\x0a\x30\xfa\xf9\x18\x19\x6b\x30\x55\xef\xb9\x02\xe3\x8f\xee\x01\xab\xc3\xc8\xc3\xf2\xa3\x75\x47\xbf\x4b\x1c\x89\xdd\x10\x77\x4c\x89\xc7\xfe\xb4\xcb\x44\x05\x22\xd1\x86\x03\xe1\x66\xb6\x3c\x6c\x71\x13\xac\x27\xdc\x7f\xc0\xf6\x73\x31\x26\x55\x30\x22\xe5\x5a\x15\x2b\x91\x02\xaa\x56\x22\x14\x3a\x55\x68\x00\x76\xbb\x5c\xcd\x97\x15\xc9\x5a\xe0\xd3\x4c\x2f\xee\x12\xc7\xc5\x31\xca\x5a\x56\x7b\x97\x11\x05\x10\xd9\x1c\x28\x94\x6c\xaa\xd7\x4a\xda\x3b\xe2\xe1\xd8\xe5\xcc\x37\x62\xea\xd0\x97\x57\xe8\x97\xe0\xb0\xf6\xf8\x7e\x95\x9c\xa1\xe6\x99\xaf\xaf\x9d\x8d\xa1\xa3\xa7\x2d\x6e\x4a\x51\x39\xd9\xbd\x8d\xd6\x7f\x3f\xcd\x94\x54\x45\xc6\xfe\x8c\xa8\x6e\xf1\xdc\xd5\x2c\x72\xb9\x43\x91\x12\x99\xd1\xf2\xd6\xe0\x2b\xea\xaf\xc4\x4b\x0c\xaf\xba\x6f\x7d\x02\x85\xfc\x3d\x18\x4c\x24\xce\x4e\xdf\x7e\xb4\xd3\x44\xdd\xff\x6a\xe8\x92\x36\xef\xf5\xaf\xda\x00\xf3\x68\x23\xc6\x3f\x8d\x04\x4c\xfa\x39\xb2\x1b\x30\x52\xca\x81\x91\xb8\xfd\x44\x5c\x3f\xb3\x4d\x5b\x67\x34\x37\x69\x9c\x4d\x84\x61\x9c\xf6\xe7\xe3\x55\xb3\x07\x63\x5e\xfa\xb3\x28\x81\xe9\xa8\xb7\xcb\xc4\xf9\x75\xb6\x61\x74\x75\xef\xb9\xfd\x36\xc7\x31\x70\x5f\x57\x4b\xa0\xa7\x99\x1c\x53\x87\xd9\xb2\xc7\x77\x8f\xd5\x36\x07\x36\x0d\x98\xf2\x6b\xd7\x0f\x9a\xe7\xb8\xc4\x80\xff\xb4\xb4\x78\x33\x3f\x10\xa1\x29\x95\x19\xbc\xd9\x86\x2e\xa9\xf4\x7a\xfa\x15\x00\x00\xff\xff\x2e\x09\x59\xe0\xfe\x03\x00\x00")

func templatesTestifyGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesTestifyGoTpl,
		"templates/testify.go.tpl",
	)
}

func templatesTestifyGoTpl() (*asset, error) {
	bytes, err := templatesTestifyGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/testify.go.tpl", size: 1022, mode: os.FileMode(420), modTime: time.Unix(1481575022, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/simple.go.tpl": templatesSimpleGoTpl,
	"templates/testify.go.tpl": templatesTestifyGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"simple.go.tpl": &bintree{templatesSimpleGoTpl, map[string]*bintree{}},
		"testify.go.tpl": &bintree{templatesTestifyGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

