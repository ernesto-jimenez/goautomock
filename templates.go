// Code generated by go-bindata.
// sources:
// templates/simple.go.tpl
// templates/testify.go.tpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesSimpleGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4d\x6b\xdb\x40\x10\x3d\x6b\x7f\xc5\x20\x4c\x91\x1a\xa3\xdc\x03\x3e\x05\x0a\x85\x26\x04\x93\xb6\x87\x90\xc3\xb2\x1a\xd9\x8b\xb5\x2b\x21\xad\xa8\xdd\xe9\xfc\xf7\xb2\x1f\x91\xea\x34\x6d\x29\x6d\x2e\x62\x77\x34\x9a\xf7\xe6\xbd\x19\xf5\x52\x1d\xe4\x0e\x81\xa8\xba\x8b\x47\x66\x21\xb4\xe9\xbb\xc1\x41\x21\xb2\xbc\x31\x2e\x17\x59\x3e\x9e\xac\xca\x05\xd1\x20\xed\x0e\x61\xd5\x4b\xb7\x5f\xc3\xca\x4a\x83\x70\xb5\x81\xea\x7d\xf8\x60\x64\x16\x19\x51\x08\x33\x43\x4e\x14\x12\x99\x73\x22\xb4\x35\xb3\x28\x85\xb8\xbc\xf4\x60\xb7\x31\xc5\x74\xea\x20\xdc\xa9\xc7\x1f\x62\xa3\x1b\x26\xe5\x80\x44\x66\x26\x07\x1e\xb8\xda\x7e\xbe\x99\x1c\x1e\x45\xa6\x64\xdb\x8e\x60\x64\xff\x30\xba\x41\xdb\xdd\xa3\xb6\xce\x43\x46\x5a\xd5\x0d\xba\x7d\x57\x27\x1a\xa9\xde\xbb\xc9\x2a\x68\x26\xab\x8a\x99\xbd\xb6\x35\x1e\xd7\xb0\x0a\xc0\x9e\xfe\x9d\x1c\xa4\xb9\x3f\xf5\x38\x32\x13\xe9\x26\xa5\x30\xaf\x21\x31\x27\x0a\xd9\xfe\x10\xee\x25\xfc\xa6\xdc\x16\xdd\x34\xd8\xbf\xab\xe7\x19\x47\x8d\x58\x08\x4f\x17\x6e\xf1\x4b\x6a\x02\xbe\xc1\xb5\xec\xb5\x93\xad\xfe\x8a\xcc\x45\x09\x6f\x17\xb9\x48\x64\x43\xc0\x83\x37\x73\x90\x44\x16\xa5\xba\x02\x23\x0f\x58\x9c\x0b\x56\xae\x45\x16\x60\x88\x56\x3b\xb4\x81\x32\xb3\x78\x41\xc5\x9f\xbc\xc2\x1a\x4c\x78\x1b\x29\x16\xc6\x33\xf1\x45\x52\x52\xb9\xe4\xff\x93\xdc\x3d\xd1\x53\x0c\x5e\x5d\x7a\x2f\x61\x8d\x0d\x0e\x71\x4c\xc2\x3d\x33\x95\x99\x5c\xf5\xa1\x53\x87\xa2\x0c\xd7\xa0\xe7\x43\x3e\xf7\x97\x3f\x5e\x5c\xcc\x79\x1f\x6d\x9b\x32\xd9\x3f\x74\x03\xa6\x3a\x9f\xc0\xcd\x06\xac\x6e\x43\xe9\x5e\x5a\xad\x8a\x7c\xb2\x78\xec\x51\x39\xac\xc1\xd7\x06\xd7\x9d\x4b\xbc\x48\x99\xfb\xba\x7e\x40\x74\xf3\xac\xc3\xe4\x7c\xea\xe4\x39\xe8\xff\xb2\x60\x16\xce\xe3\x7f\x92\x83\x96\xb5\x56\xcc\x55\x55\xcd\xd3\xcb\xe7\x8b\x7d\xdf\x39\xd9\x5e\x87\x65\x8d\x14\x47\x70\x7b\x04\x69\xba\xc9\x3a\xe8\x1a\x88\x8b\xec\xba\x10\xfe\x45\xdb\x7f\x9e\xb1\x05\xa6\x28\x41\xdb\xf8\xd3\x08\x86\x6c\x9f\x9c\x8b\xc6\xa6\xe0\x62\x53\x12\xee\x25\x5b\x85\x5f\x85\xb8\x8a\xdf\x03\x00\x00\xff\xff\xea\x82\x10\x53\x1e\x05\x00\x00")

func templatesSimpleGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSimpleGoTpl,
		"templates/simple.go.tpl",
	)
}

func templatesSimpleGoTpl() (*asset, error) {
	bytes, err := templatesSimpleGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/simple.go.tpl", size: 1310, mode: os.FileMode(420), modTime: time.Unix(1517049391, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTestifyGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\x41\x8b\xdb\x30\x10\x85\xcf\xd2\xaf\x18\x4c\x5a\xec\x12\x94\x7b\xa0\xa7\x3d\x94\x1e\x76\x59\xda\xd2\xbb\x2a\x8f\x13\xb1\xb6\x62\xa4\xf1\xee\xa6\xd3\xf9\xef\x45\x8a\xe3\x6c\x49\x59\x0a\x2d\xf4\x26\x46\x6f\x3e\xbd\x79\x92\x46\xeb\x1e\xec\x0e\x81\xd9\xdc\x9f\x96\x22\x5a\xfb\x61\x3c\x44\x82\x5a\xab\xaa\x1b\xa8\xd2\x6a\x38\xb8\x07\xa8\x76\x9e\xf6\xd3\x37\xe3\x0e\xc3\x26\x51\x44\x72\xfb\xb8\x21\x4c\xe4\xbb\xe3\x26\x2b\x2a\xcd\x1c\x6d\xd8\x21\xac\x46\x4b\xfb\x35\xac\x82\x1d\x10\xb6\xef\xc1\x7c\x2c\xc4\x24\xa2\x15\x73\x29\x8b\x40\xc5\x5c\x84\x22\x15\x33\x86\x56\x44\x37\x5a\x6f\x36\xd9\xcd\xdd\x49\x92\xb1\x9a\x8e\x23\xbe\xa8\x25\x8a\x93\x23\xe0\x93\x2d\x73\x9b\x25\xa2\x75\x37\x05\x07\x77\xf8\x34\x0b\xe1\x07\xdc\xd8\xd1\x93\xed\xfd\x77\x14\xa9\x1b\x78\x77\x41\xb0\x56\x11\x69\x8a\x01\xde\x2e\x45\x96\x4c\x61\x5e\xed\x30\x14\xcf\x22\xcb\x3c\xe6\x16\x69\x7f\x68\xb3\xff\x2b\x7b\xd8\xc2\x50\x76\x4f\x0e\xea\x21\x1f\x94\x21\xb3\xa8\xb9\xe8\xeb\x25\x1f\x1f\x5a\x7c\x5e\xc3\xaa\x8c\x96\x0f\xbb\xb7\xd1\x0e\x5f\x8e\x23\x26\x11\x66\xdf\xcd\x12\x91\x35\xcc\xd9\x8c\xcc\xe7\x1a\x30\x97\xce\x2c\x2d\x7b\x0d\xbc\x82\xfe\x54\x26\x7d\x95\x7d\xcd\x63\x5d\x94\xbf\x36\x97\xd4\x32\x73\x30\x37\xb6\xef\xb1\xfd\x57\x03\x2d\x36\xf2\x91\x5f\x6d\xf4\xb6\xf5\x4e\xc4\x18\x73\x36\x94\xdf\xcd\x1f\x0d\xa8\xd5\xa3\x8d\x10\x7f\x17\x96\x56\xe9\xc9\x93\xdb\x43\xc4\x94\x1b\x23\x92\xf9\x80\x54\x5f\xb4\x8d\xa9\xb3\x34\x8f\xaf\x9c\x4d\x08\xc1\xf7\xdb\x79\xb9\x60\xb6\x5a\xa9\x97\xfc\x0c\x4a\x5a\xb5\xd8\xd9\xa9\xa7\xbc\x3b\xda\xe0\x5d\xdd\x0d\x64\x3e\x8f\xd1\x07\xea\xea\x6a\x0a\xf8\x3c\xa2\x23\x6c\x21\x53\xb6\xf0\xe6\xb1\x5a\xe7\xc6\xa6\xd1\xaa\xfc\x8a\xd3\x07\x38\xbf\xcb\xbf\xba\xce\x78\x95\xac\x66\xc6\x3e\x95\x0c\xfe\xc3\xdd\x9d\x4d\xc8\xb2\xfa\x19\x00\x00\xff\xff\x4e\x9b\x16\xcb\x78\x04\x00\x00")

func templatesTestifyGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesTestifyGoTpl,
		"templates/testify.go.tpl",
	)
}

func templatesTestifyGoTpl() (*asset, error) {
	bytes, err := templatesTestifyGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/testify.go.tpl", size: 1144, mode: os.FileMode(420), modTime: time.Unix(1516999254, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/simple.go.tpl": templatesSimpleGoTpl,
	"templates/testify.go.tpl": templatesTestifyGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"simple.go.tpl": &bintree{templatesSimpleGoTpl, map[string]*bintree{}},
		"testify.go.tpl": &bintree{templatesTestifyGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

